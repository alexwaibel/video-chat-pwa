{"version":3,"sources":["Jitsi.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Jitsi","useState","loading","setLoading","jitsiContainerStyle","display","width","height","useEffect","window","JitsiMeetExternalAPI","options","roomName","parentNode","document","getElementById","configOverwrite","disableDeepLinking","api","addEventListener","console","log","executeCommand","error","startConference","alert","style","id","App","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wPAmDeA,MAjDf,WAAkB,IAAD,EACeC,oBAAS,GADxB,mBACRC,EADQ,KACCC,EADD,KAOTC,EAAsB,CAC1BC,QAASH,EAAU,OAAS,QAC5BI,MAAO,OACPC,OAAQ,QA+BV,OANAC,qBAAU,WAEJC,OAAOC,qBAxBb,WACE,IACE,IACMC,EAAU,CACdC,SAAU,6BACVC,WAAYC,SAASC,eAAe,mBACpCC,gBAAiB,CACfC,oBAAoB,IAIlBC,EAAM,IAAIR,qBATD,cAS8BC,GAC7CO,EAAIC,iBAAiB,yBAAyB,WAC5CC,QAAQC,IAAI,qBACZlB,GAAW,GACXe,EAAII,eAAe,cAAe,aAEpC,MAAOC,GACPH,QAAQG,MAAM,2BAA4BA,IAMXC,GAC5BC,MAAM,sCACV,IAGD,yBAAKC,MAxCgB,CACrBpB,MAAO,QACPC,OAAQ,UAuCLL,GAAW,4CACZ,yBAAKyB,GAAG,kBAAkBD,MAAOtB,MClCxBwB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKAC,EAAcC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B5B,QAAQC,IACN,iHAKEgB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBtB,QAAQC,IAAI,sCAGRgB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAA5B,GACLH,QAAQG,MAAM,4CAA6CA,MClGjE6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDiBnB,SAAkBsB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIiB,IACpBC,kBACA/C,OAAOuB,SAASyB,MAEJC,SAAWjD,OAAOuB,SAAS0B,OAIvC,OAGFjD,OAAOU,iBAAiB,QAAQ,WAC9B,IAAMiB,EAAK,UAAMoB,kBAAN,sBAEP1B,IAgEV,SAAiCM,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BnB,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BhC,OAAOuB,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL/B,QAAQC,IACN,oEAvFAgD,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCrB,QAAQC,IACN,iHAMJc,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.fb3a15e7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Jitsi() {\n  const [loading, setLoading] = useState(true);\n  const containerStyle = {\n    width: \"800px\",\n    height: \"400px\",\n  };\n\n  const jitsiContainerStyle = {\n    display: loading ? \"none\" : \"block\",\n    width: \"100%\",\n    height: \"100%\",\n  };\n\n  function startConference() {\n    try {\n      const domain = \"meet.jit.si\";\n      const options = {\n        roomName: \"this-is-a-unique-room-name\",\n        parentNode: document.getElementById('jitsi-container'),\n        configOverwrite: {\n          disableDeepLinking: true,\n        },\n      };\n\n      const api = new JitsiMeetExternalAPI(domain, options);\n      api.addEventListener(\"videoConferenceJoined\", () => {\n        console.log(\"Local User Joined\");\n        setLoading(false);\n        api.executeCommand(\"displayName\", \"MyName\");\n      });\n    } catch (error) {\n      console.error(\"Failed to load Jitsi API\", error);\n    }\n  }\n\n  useEffect(() => {\n    // verify the JitsiMeetExternalAPI constructor is added to the global..\n    if (window.JitsiMeetExternalAPI) startConference();\n    else alert(\"Jitsi Meet API script not loaded\");\n  }, []);\n\n  return (\n    <div style={containerStyle}>\n      {loading && <span>Loading...</span>}\n      <div id=\"jitsi-container\" style={jitsiContainerStyle} />\n    </div>\n  );\n}\n\nexport default Jitsi;\n","import React from 'react';\nimport './App.css';\nimport Jitsi from './Jitsi';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jitsi />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}